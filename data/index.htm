<!DOCTYPE html>
<html>
	<head>
		<!--Import Google Icon Font-->
		<link href="http://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
		<!--Import materialize.css-->
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/css/materialize.min.css" media="screen,projection" />

		<!--Let browser know website is optimized for mobile-->
		<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
		<meta charset="utf-8"/>
		<!--Lovingly stolen from http://codepen.io/tobyj/pen/QjvEex -->
		<style>
			.lightrope {
			  text-align: center;
			  white-space: nowrap;
			  overflow: hidden;
			  position: absolute;
			  z-index: 1;
			  margin: -15px 0 0 0;
			  padding: 0;
			  pointer-events: none;
			  width: 100%;
			}
			.lightrope li {
			  position: relative;
			  -webkit-animation-fill-mode: both;
			          animation-fill-mode: both;
			  -webkit-animation-iteration-count: infinite;
			          animation-iteration-count: infinite;
			  list-style: none;
			  margin: 0;
			  padding: 0;
			  display: block;
			  width: 12px;
			  height: 28px;
			  border-radius: 50%;
			  margin: 20px;
			  display: inline-block;
			  background: #00f7a5;
			  box-shadow: 0px 4.66667px 24px 3px #00f7a5;
			  -webkit-animation-name: flash-1;
			          animation-name: flash-1;
			  -webkit-animation-duration: 2s;
			          animation-duration: 2s;
			}
			.lightrope li:nth-child(2n+1) {
			  background: cyan;
			  box-shadow: 0px 4.66667px 24px 3px rgba(0, 255, 255, 0.5);
			  -webkit-animation-name: flash-2;
			          animation-name: flash-2;
			  -webkit-animation-duration: 0.4s;
			          animation-duration: 0.4s;
			}
			.lightrope li:nth-child(4n+2) {
			  background: #f70094;
			  box-shadow: 0px 4.66667px 24px 3px #f70094;
			  -webkit-animation-name: flash-3;
			          animation-name: flash-3;
			  -webkit-animation-duration: 1.1s;
			          animation-duration: 1.1s;
			}
			.lightrope li:nth-child(odd) {
			  -webkit-animation-duration: 1.8s;
			          animation-duration: 1.8s;
			}
			.lightrope li:nth-child(3n+1) {
			  -webkit-animation-duration: 1.4s;
			          animation-duration: 1.4s;
			}
			.lightrope li:before {
			  content: "";
			  position: absolute;
			  background: #222;
			  width: 10px;
			  height: 9.33333px;
			  border-radius: 3px;
			  top: -4.66667px;
			  left: 1px;
			}
			.lightrope li:after {
			  content: "";
			  top: -14px;
			  left: 9px;
			  position: absolute;
			  width: 52px;
			  height: 18.66667px;
			  border-bottom: solid #222 2px;
			  border-radius: 50%;
			}
			.lightrope li:last-child:after {
			  content: none;
			}
			.lightrope li:first-child {
			  margin-left: -40px;
			}

			@-webkit-keyframes flash-1 {
			  0%,
			  100% {
			    background: #00f7a5;
			    box-shadow: 0px 4.66667px 24px 3px #00f7a5;
			  }
			  50% {
			    background: rgba(0, 247, 165, 0.4);
			    box-shadow: 0px 4.66667px 24px 3px rgba(0, 247, 165, 0.2);
			  }
			}

			@keyframes flash-1 {
			  0%,
			  100% {
			    background: #00f7a5;
			    box-shadow: 0px 4.66667px 24px 3px #00f7a5;
			  }
			  50% {
			    background: rgba(0, 247, 165, 0.4);
			    box-shadow: 0px 4.66667px 24px 3px rgba(0, 247, 165, 0.2);
			  }
			}
			@-webkit-keyframes flash-2 {
			  0%,
			  100% {
			    background: cyan;
			    box-shadow: 0px 4.66667px 24px 3px cyan;
			  }
			  50% {
			    background: rgba(0, 255, 255, 0.4);
			    box-shadow: 0px 4.66667px 24px 3px rgba(0, 255, 255, 0.2);
			  }
			}
			@keyframes flash-2 {
			  0%,
			  100% {
			    background: cyan;
			    box-shadow: 0px 4.66667px 24px 3px cyan;
			  }
			  50% {
			    background: rgba(0, 255, 255, 0.4);
			    box-shadow: 0px 4.66667px 24px 3px rgba(0, 255, 255, 0.2);
			  }
			}
			@-webkit-keyframes flash-3 {
			  0%,
			  100% {
			    background: #f70094;
			    box-shadow: 0px 4.66667px 24px 3px #f70094;
			  }
			  50% {
			    background: rgba(247, 0, 148, 0.4);
			    box-shadow: 0px 4.66667px 24px 3px rgba(247, 0, 148, 0.2);
			  }
			}
			@keyframes flash-3 {
			  0%,
			  100% {
			    background: #f70094;
			    box-shadow: 0px 4.66667px 24px 3px #f70094;
			  }
			  50% {
			    background: rgba(247, 0, 148, 0.4);
			    box-shadow: 0px 4.66667px 24px 3px rgba(247, 0, 148, 0.2);
			  }
			}
		</style>
	</head>

	<body>
	<ul class="lightrope"><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/><li/></ul>
		<nav class="light-blueXXX lighten-1XXX" role="navigation" id="mc-nav">
			<div class="nav-wrapper container"><a id="logo-container" href="#" class="brand-logo">Griswold LED Control</a>
				<ul class="right hide-on-med-and-down">
					<li><a href="#" class="mc-navlink" data-pane="pane1">Wheel</a></li>
					<li><a href="#" class="mc-navlink" data-pane="pane3">Gradient</a></li>
					<li><a href="#" class="mc-navlink" data-pane="pane2">Modes</a></li>
				</ul>

				<ul id="nav-mobile" class="side-nav">
					<li><a href="#" class="mc-navlink" data-pane="pane1">Wheel</a></li>
					<li><a href="#" class="mc-navlink" data-pane="pane3">Gradient</a></li>
					<li><a href="#" class="mc-navlink" data-pane="pane2">Modes</a></li>
				</ul>
				
				<a href="#" data-activates="nav-mobile" class="button-collapse"><i class="material-icons">menu</i></a>
			</div>
		</nav>
		
		<div class="container mc_pane" id="pane0">
			<div class="section">
				<div class="row" id="mc-wsloader">
					<div class="col">
						<div class="preloader-wrapper active">
							<div class="spinner-layer spinner-red-only">
								<div class="circle-clipper left">
									<div class="circle"></div>
								</div><div class="gap-patch">
									<div class="circle"></div>
								</div><div class="circle-clipper right">
								<div class="circle"></div>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="row hide" id="mc-wserror">
					<div class="col">
						<div>Error on websocket connect.</div>
					</div>
				</div>
			</div>
		</div>
		
		<div class="container mc_pane hide" id="pane1">
			<div class="section">
				<div class="row">
					<div class="col s12 m6">
						<div style="height: 330px; width: 330px;">
							<canvas id="myCanvas" width="330" height="330" style="-webkit-user-select: none;-webkit-tap-highlight-color: rgba(0,0,0,0);-moz-user-select:none;"></canvas>
						</div>
					</div>
					<div class="col s12 m6">
						<div class="card-panel" id="status">
							<div id="status_pos">pick a color</div>
							<div id="status_color"></div>
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<div class="container mc_pane hide" id="pane2">
			<div class="section">
				<p>Show Mode</p>
				<div class="row">
					<div class="col s12 m6 l3 btn_grid">
						<button class="btn waves-effect waves-light btn_mode" name="action" data-mode="off">Off
							<i class="material-icons right">send</i>
						</button>
					</div>

					<div class="col s12 m6 l3 btn_grid">
						<a class="btn -effectwaves waves-light btn_mode" name="action" data-mode="all">All
							<i class="material-icons right">send</i>
						</a>
					</div>

					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_mode" name="action" data-mode="mixedshow">MIXED_SHOW
							<i class="material-icons right">send</i>
						</a>
					</div>		
					
					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_mode" name="action" data-mode="rainbow">RAINBOW
							<i class="material-icons right">send</i>
						</a>
					</div>
					
					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_mode" name="action" data-mode="confetti">CONFETTI
							<i class="material-icons right">send</i>
						</a>
					</div>		
					
					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_mode" name="action" data-mode="sinelon">SINELON
							<i class="material-icons right">send</i>
						</a>
					</div>					
				
					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_mode" name="action" data-mode="juggle">JUGGLE
							<i class="material-icons right">send</i>
						</a>
					</div>	
					
					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_mode" name="action" data-mode="bpm">BPM
							<i class="material-icons right">send</i>
						</a>
					</div>
					<div class="col s12 m6 l2 btn_grid">
						<a class="btn waves-effect waves-light btn_mode" name="action" data-mode="palette_anims">PALETTE ANIMS
							<i class="material-icons right">send</i>
						</a>
					</div>					
					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_mode" name="action" data-mode="ripple">RIPPLE
							<i class="material-icons right">send</i>
						</a>
					</div>	
					
					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_mode" name="action" data-mode="comet">COMET
							<i class="material-icons right">send</i>
						</a>
					</div>
					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_mode" name="action" data-mode="theaterchase">THEATRE CHASE
							<i class="material-icons right">send</i>
						</a>
					</div>		
					<div class="col s12 m6 l2 btn_grid">
						<a class="btn waves-effect waves-light btn_mode" name="action" data-mode="wipe">WIPE
							<i class="material-icons right">send</i>
						</a>
					</div>
					<div class="col s12 m6 l2 btn_grid">
						<a class="btn waves-effect waves-light btn_mode" name="action" data-mode="tv">TV
							<i class="material-icons right">send</i>
						</a>
					</div>
				</div>					
			</div>	
			<div class="section">
				<p>Palette Animations</p>
				<label class="palette_name"></label>
				<div class="row">
					<div class="col s12 m6 l2 btn_grid">
						<a class="btn waves-effect waves-light btn_palette_setting" name="action" data-mode="next_palette">Next Palette
							<i class="material-icons right">send</i>
						</a>
					</div>
					<div class="col s12 m6 l2 btn_grid">
						<a class="btn waves-effect waves-light btn_palette_setting" name="action" data-mode="random_palette">Random Palette
							<i class="material-icons right">send</i>
						</a>
					</div>
					<div class="col s12 m6 l2 btn_grid">
						<a class="btn waves-effect waves-light btn_palette_setting" name="action" data-mode="change_direction">Direction
							<i class="material-icons right">send</i>
						</a>
					</div>
				</div>
			</div>
			<div class="section">
				<p>Glitter Mode</p>			
				<div class="row">						
					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_glitter_mode" name="action" data-mode="add_glitter">ADD GLITTER
							<i class="material-icons right">send</i>
						</a>
					</div>					
					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_glitter_mode" name="action" data-mode="stop_glitter">STOP GLITTER
							<i class="material-icons right">send</i>
						</a>
					</div>
				  <label>Glitter Wipe:</label><div class="switch">
				    <label>
				      Off
				      <input type="checkbox" class="switch_glitter_wipe" id="switch_glitter_wipe">
				      <span class="lever"></span>
				      On
				    </label>
				  </div>
				</div>
			</div>
			<div class="section">
				<p>Save Settings</p>			
				<div class="row">						
					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_save" name="action">Save Settings
							<i class="material-icons right">send</i>
						</a>
					</div>	
					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_load" name="action">Load Settings
							<i class="material-icons right">send</i>
						</a>
					</div>	
					<div class="col s12 m6 l3 btn_grid">
						<a class="btn waves-effect waves-light btn_defaults" name="action">Load Defaults
							<i class="material-icons right">send</i>
						</a>
					</div>						
				</div>
			</div>
			<div class="section">
				<p>Parameters</p>				
				<div class="row">
					<form class="col s12">
						<div class="row">
							<div class="input-field col s12 l4">
								<label for="txt_red">Main Color (Red)</label><br/>
								<p class="range-field"><input type="range" id="rng_red" min="0" max="255" class="update_colors" /></p>
							</div>
							<div class="input-field col s12 l4">
								<label for="txt_green">Main Color (Green)</label><br/>
								<p class="range-field"><input type="range" id="rng_green" min="0" max="255" class="update_colors" /></p>
							</div>
							<div class="input-field col s12 l4">
								<label for="txt_blue">Main Color (Blue)</label><br/>
								<p class="range-field"><input type="range" id="rng_blue" min="0" max="255" class="update_colors" /></p>
							</div>
						</div>
						
						<div class="row">
							<div class="input-field col s12 l4">
								<label for="txt_red">Glitter Color (Red)</label><br/>
								<p class="range-field"><input type="range" id="rng_glitter_red" min="0" max="255" class="update_glittercolors" /></p>
							</div>
							<div class="input-field col s12 l4">
								<label for="txt_green">Glitter Color (Green)</label><br/>
								<p class="range-field"><input type="range" id="rng_glitter_green" min="0" max="255" class="update_glittercolors" /></p>
							</div>
							<div class="input-field col s12 l4">
								<label for="txt_blue">Glitter Color (Blue)</label><br/>
								<p class="range-field"><input type="range" id="rng_glitter_blue" min="0" max="255" class="update_glittercolors" /></p>
							</div>
						</div>
						
						<div class="row">
							<div class="input-field col s12">
								<label for="txt_FPS">Frames Per Second (Speed)</label><br/>
								<p class="range-field"><input type="range" id="rng_FPS" min="1" max="100" value="50" class="update_FPS" /></p>
							</div>
						</div>

						<div class="row">
							<div class="input-field col s12">
								<label for="txt_brightness">Brightness (Effect)</label><br/>
								<p class="range-field"><input type="range" id="rng_effect_brightness" min="0" max="255" value="255" class="update_effect_brightness" /></p>
							</div>
						</div>
						
						<div class="row">
							<div class="input-field col s12">
								<label for="txt_brightness">Brightness (Overall)</label><br/>
								<p class="range-field"><input type="range" id="rng_brightness" min="0" max="255" value="255" class="update_brightness" /></p>
							</div>
						</div>			
            			<div class="row">
							<div class="input-field col s12">
								<label for="txt_show_length">Show Length ********How long to wait until switching in Mixed Show or Palette Anim Modes***********</label><br/>
								<p class="range-field"><input type="range" id="rng_show_length" min="1" max="180" value="10" class="update_show_length" /></p>
							</div>
						</div>
            			<div class="row">
							<div class="input-field col s12">
								<label for="txt_FTBS">Fade to Black Speed ********slow this down to slow the dim time of animations that use dimming********</label><br/>
								<p class="range-field"><input type="range" id="rng_FTBS" min="1" max="100" value="50" class="update_FTBS" /></p>
							</div>
						</div>						
            			<div class="row">
							<div class="input-field col s12">
								<label for="txt_glitterdensity">Glitter Density</label><br/>
								<p class="range-field"><input type="range" id="rng_glitterdensity" min="1" max="200" value="50" class="update_glitterdensity" /></p>
							</div>
						</div>						
            			<div class="row">
							<div class="input-field col s12">
								<label for="txt_confettidensity">Confetti Density</label><br/>
								<p class="range-field"><input type="range" id="rng_confettidensity" min="1" max="200" value="50" class="update_confettidensity" /></p>
							</div>
						</div>						
					</form>
				</div>
			</div>
		</div>

		<div class="container mc_pane hide" id="pane3">
		    <div style="width:800px; height:800px; margin:0 auto;">
		    	<br>
    			toHEXString = <span id="hex-str"></span>
    			<br />
    			toRGBString = <span id="rgb-str"></span>
    			<br />
    			R, G, B = <span id="rgb"></span>
    			<br />
    			H, S, V = <span id="hsv"></span>
    			<br />    		
				<input id='jscolor_picker' readonly = "true" value="ffcc00" class="jscolor {onFineChange:'gradientPickerUpdate(this)',width:800, height:450, position:'bottom', borderColor:'#FFF', insetColor:'#FFF', backgroundColor:'#666'}">
			</div>
		</div>

		<footer class="page-footer">
			<div class="footer-copyright">
				<div class="container">© 2016
					<div class="right"> 
						<a class="grey-text text-lighten-4" href="https://github.com/toblum/McLighting">McLighting Project home</a> &bull; 
						<a class="grey-text text-lighten-4" href="https://github.com/russp81/LEDLAMP_FASTLEDs">LEDLAMP Project home</a> &bull; 
						<a class="grey-text text-lighten-4" href="https://github.com/jake-b/Griswold-LED-Controller">Griswold Project home</a>
					</div>
				</div>
			</div>
		</footer>
		
		<style type="text/css">
			.btn_grid {
				margin: 7px 0;
			}
		</style>
	
		<!--Import jQuery before materialize.js-->
		<script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
		<!--<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/js/materialize.min.js"></script>-->
		<script src="materialize.min.js"></script>
		<script src="jscolor.js"></script>
		<script type="text/javascript">(function($){
$(function(){
	  
	// Settings
	var host = window.location.hostname;
	//host = "192.168.0.24";

	var ws_url = 'ws://' + host + ':81';
	var connection;
	var ws_waiting = 0;
	var last_pane = null;

	// ******************************************************************
	// Side navigation
	// ******************************************************************
    $('.button-collapse').sideNav();
	
	// Navlinks
	$('#mc-nav').on('click', '.mc-navlink', function(){
		console.log("Navigate to pane: ", $(this).data("pane"));
		showPane($(this).data("pane"));
	});

	$('#get_status').on('click', function() {
		wsSendCommand('$');
	});
	
	function showPane(pane) {
		$('.mc_pane').addClass('hide');
		$('#' + pane).removeClass('hide');
		$('.button-collapse').sideNav('hide');
		
		//if (pane == "pane2") {
			//setMainColor();
			wsSendCommand('$'); // request status in JSON format.
		//}

		if (pane == "pane3") {
			$('#jscolor_picker')[0].jscolor.show();
		}

		if (pane != 'pane0') {
			last_pane = pane;
		}
	}
	
	gradientPickerUpdate = function(picker) {
		
    	document.getElementById('hex-str').innerHTML = picker.toHEXString();
    	document.getElementById('rgb-str').innerHTML = picker.toRGBString();

    	document.getElementById('rgb').innerHTML =
        	Math.round(picker.rgb[0]) + ', ' +
        	Math.round(picker.rgb[1]) + ', ' +
        	Math.round(picker.rgb[2]);

    	document.getElementById('hsv').innerHTML =
        	Math.round(picker.hsv[0]) + '&deg;, ' +
        	Math.round(picker.hsv[1]) + '%, ' +
        	Math.round(picker.hsv[2]) + '%';

    	var red = Math.round(picker.rgb[0]);
    	var green = Math.round(picker.rgb[1]);
    	var blue = Math.round(picker.rgb[2]);
        
		var mainColorHex = componentToHex(red) + componentToHex(green) + componentToHex(blue);

		wsSetAll(mainColorHex);
	}

	function connect() {
		console.log("Connection websockets to:", ws_url);
		connection = new WebSocket(ws_url, ['arduino']);
				
		// When the connection is open, send some data to the server
		connection.onopen = function () {
			//connection.send('Ping'); // Send the message 'Ping' to the server
			console.log('WebSocket Open');
			if (last_pane) { 
				showPane(last_pane);
			} else {
				showPane('pane1');
			}
		};

		// Log errors
		connection.onerror = function (error) {
			console.log('WebSocket Error ' + error);
			$('#mc-wsloader').addClass('hide');
			$('#mc-wserror').removeClass('hide');
			ws.close();
		};

		connection.onclose = function(e) {
    		console.log('WebSocket closed: reconnect attempt in 1 second', e.reason);
    		setTimeout(function() {
      			connect();
    		}, 1000)
    		showPane('pane0');
  		};

		// Log messages from the server
		connection.onmessage = function (e) {
			if (e.data == "OK") {
				console.log('WebSocket from server: ' + e.data);
			} else if (e.data.charAt(0) == '{') {
				console.log('status response' + e.data);
				var obj = JSON.parse(e.data);
				$("#rng_red").val(obj.color[0]);
				$("#rng_green").val(obj.color[1]);
				$("#rng_blue").val(obj.color[2]);

				$("#rng_glitter_red").val(obj.glitter_color[0]);
				$("#rng_glitter_green").val(obj.glitter_color[1]);
				$("#rng_glitter_blue").val(obj.glitter_color[2]);	

				$("#rng_FTBS").val(obj.ftb_speed);
				$("#rng_FPS").val(obj.FPS);
				$("#rng_show_length").val(obj.show_length);	
				$("#rng_brightness").val(obj.overall_brightness);
				$("#rng_effect_brightness").val(obj.effect_brightness);
				$("#rng_glitterdensity").val(obj.glitter_density);
				$("#rng_confettidensity").val(obj.confetti_density);

				$(".btn_mode").removeClass("blue");
				$(".btn_mode").eq(obj.mode - 1).addClass("blue");  //-1 because of "HOLD" mode, not impl

				$(".btn_glitter_mode").removeClass("blue");
				$(".btn_glitter_mode").eq(!obj.glitter_on).addClass("blue");

				updateStatusUI(null, obj.color);
				$("#jscolor_picker")[0].jscolor.fromRGB(obj.color[0],obj.color[1],obj.color[2]);

				$(".palette_name").text(obj.palette_name);
				$("#switch_glitter_wipe")[0].checked = obj.glitter_wipe_on;
			} else if (e.data.charAt(0) == 'p') {
				console.log('Palette name message: \'' + e.data + '\'');
				$(".palette_name").text(e.data.substring(1));
			}

			ws_waiting = 0;
		};
	}

	// ******************************************************************
	// init()
	// ******************************************************************
	function init() {
		connect();
	}	
// ****************************MAIN MODE UPDATE FUNCTIONS*************************************************
	$("#pane2").on("click", ".btn_defaults", function() {
		wsSendCommand('`');
	});

	$("#pane2").on("click", ".btn_save", function() {
		wsSendCommand('|');
	});

	$("#pane2").on("click", ".btn_load", function() {
		wsSendCommand('\\');
	});

	$("#pane2").on("click", ".btn_mode", function() {
		
		var mode = $(this).attr("data-mode");
		last_mode = mode;
		var btn = $(this);
	
	 
		setMode(mode, function() {
			$(".btn_mode").removeClass("blue");
			btn.addClass("blue");
		});
	});

	$("#pane2").on("click", ".btn_glitter_mode", function() {
		var mode = $(this).attr("data-mode");
		var btn = $(this);
	 
		setMode(mode, function() {
			$(".btn_glitter_mode").removeClass("blue");
			btn.addClass("blue");
		});
	});

	$("#pane2").on("click", ".btn_palette_setting", function() {
		var mode = $(this).attr("data-mode");
		if (mode == "next_palette") {
			wsSendCommand('{+');	
		} else if (mode == "random_palette") {
			wsSendCommand('{r');
		} else if (mode == "change_direction") {
			wsSendCommand('{d');
		}		
	});

	$("#pane2").on("change", ".update_colors", setMainColor);	
	
	$("#pane2").on("change", ".update_glittercolors", setGlitterColor);
	
	$("#pane2").on("change", ".update_FPS", function() {
		var FPS = $("#rng_FPS").val();		
		
		wsSendCommand("?" + FPS);
	});
	
	$("#pane2").on("change", ".update_brightness", function() {
		var brightness = $("#rng_brightness").val();		
		
		wsSendCommand("%" + brightness);
	});

	$("#pane2").on("change", ".update_effect_brightness", function() {
		var brightness = $("#rng_effect_brightness").val();		
		
		wsSendCommand("e" + brightness);
	});
	
	$("#pane2").on("change", ".update_show_length", function() {
		var show_length = $("#rng_show_length").val();		
		
		wsSendCommand("^" + show_length);
	});
	
	$("#pane2").on("change", ".update_FTBS", function() {
		var ftbspeed = $("#rng_FTBS").val();		
		
		wsSendCommand("_" + ftbspeed);
	});
	
	$("#pane2").on("change", ".update_glitterdensity", function() {
		var glitterdensity = $("#rng_glitterdensity").val();		
		
		wsSendCommand("+" + glitterdensity);
	});	

	$("#pane2").on("change", ".update_confettidensity", function() {
		var confettidensity = $("#rng_confettidensity").val();		
		
		wsSendCommand("\"" + confettidensity);
	});	

	$("#pane2").on("change", ".switch_glitter_wipe", function() {
		var checked = $("#switch_glitter_wipe").prop('checked')		
		if (checked)
			wsSendCommand("=start_glitter_wipe");
		else
			wsSendCommand("=stop_glitter_wipe");
	});	

	function setMode(mode, finish_funtion) {
		var url = "http://" + host + "/" + mode;
		console.log("Mode: ", mode);

		wsSendCommand("=" + mode);
		finish_funtion();
	}
	
	function setMainColor() {
		var red = $("#rng_red").val();
		var green = $("#rng_green").val();
		var blue = $("#rng_blue").val();		
		
		var glitter_red = $("#rng_glitter_red").val();
		var glitter_green = $("#rng_glitter_green").val();
		var glitter_blue = $("#rng_glitter_blue").val();
		
		var mainColorHex = componentToHex(red) + componentToHex(green) + componentToHex(blue);
		var glitterColorHex = componentToHex(glitter_red) + componentToHex(glitter_green) + componentToHex(glitter_blue);
		
		wsSetMainColor(mainColorHex);
		wsSetGlitterColor(glitterColorHex);
	}
	
		function setGlitterColor() {

		var glitter_red = $("#rng_glitter_red").val();
		var glitter_green = $("#rng_glitter_green").val();
		var glitter_blue = $("#rng_glitter_blue").val();
		
		var glitterColorHex = componentToHex(glitter_red) + componentToHex(glitter_green) + componentToHex(glitter_blue);
		
		wsSetGlitterColor(glitterColorHex);
	}

// ****************************END OF MAIN MODE UPDATE FUNCTIONS*************************************************	
	
// ****************************COMET UPDATE FUNCTIONS*************************************************


	// ******************************************************************
	// WebSocket commands
	// ******************************************************************
	function wsSendCommand(cmd) {
		console.log("Send WebSocket command:", cmd);
		if (ws_waiting == 0)  {
			connection.send(cmd);
			ws_waiting++;
		} else {
			console.log("++++++++ WS call waiting, skip")
		}
	}	
	
	
	function wsSetAll(hexColor) {
		console.log("wsSetAll() Set all colors to:", hexColor);
		wsSendCommand("*" + hexColor);
	}
	
	function wsSetMainColor(hexColor) {
		console.log("wsSetMainColor() Set main colors to:", hexColor);
		wsSendCommand("#" + hexColor);
	}
	
	function wsSetGlitterColor(hexColor) {
		console.log("wsSetGlitterColor() Set glitter colors to:", hexColor);
		wsSendCommand("G" + hexColor);
	}	
	
	// ******************************************************************
	// Colorwheel
	// ******************************************************************
	// this is supposed to work on mobiles (touch) as well as on a desktop (click)
	// since we couldn't find a decent one .. this try of writing one by myself
	// + google. swiping would be really nice - I will possibly implement it with
	// jquery later - or never.

	var canvas = document.getElementById("myCanvas");
	// FIX: Cancel touch end event and handle click via touchstart
	// canvas.addEventListener("touchend", function(e) { e.preventDefault(); }, false);
	canvas.addEventListener("touchmove", doTouch, false);
	canvas.addEventListener("click", doClick, false);
	//canvas.addEventListener("mousemove", doClick, false);

	
	var context = canvas.getContext('2d');
	var centerX = canvas.width / 2;
	var centerY = canvas.height / 2;
	var innerRadius = canvas.width / 4.5;
	var outerRadius = (canvas.width - 10) / 2

	//outer border
	context.beginPath();
	//outer circle
	context.arc(centerX, centerY, outerRadius, 0, 2 * Math.PI, false);
	//draw the outer border: (gets drawn around the circle!)
	context.lineWidth = 4;
	context.strokeStyle = '#000000';
	context.stroke();
	context.closePath();

	//fill with beautiful colors 
	//taken from here: http://stackoverflow.com/questions/18265804/building-a-color-wheel-in-html5
	for(var angle=0; angle<=360; angle+=1) {
		var startAngle = (angle-2)*Math.PI/180;
		var endAngle = angle * Math.PI/180;
		context.beginPath();
		context.moveTo(centerX, centerY);
		context.arc(centerX, centerY, outerRadius, startAngle, endAngle, false);
		context.closePath();
		context.fillStyle = 'hsl('+angle+', 100%, 50%)';
		context.fill();
		context.closePath();
	}

	//inner border
	context.beginPath();
	//context.arc(centerX, centerY, radius, startAngle, endAngle, counterClockwise);
	context.arc(centerX, centerY, innerRadius, 0, 2 * Math.PI, false);
	//fill the center
	var my_gradient=context.createLinearGradient(0,0,170,0);
	my_gradient.addColorStop(0,"black");
	my_gradient.addColorStop(1,"white");
	
	context.fillStyle = my_gradient;
	context.fillStyle = "white";
	context.fill();

	//draw the inner line
	context.lineWidth = 2;
	context.strokeStyle = '#000000';
	context.stroke();
	context.closePath();

	//get Mouse x/y canvas position
	function getMousePos(canvas, evt) {
		var rect = canvas.getBoundingClientRect();
		return {
			x: evt.clientX - rect.left,
			y: evt.clientY - rect.top
		};
	}

	//comp to Hex
	function componentToHex(c) {
		//var hex = c.toString(16);
		//return hex.length == 1 ? "0" + hex : hex;
		return  ("0"+(Number(c).toString(16))).slice(-2).toUpperCase();
	}

	//rgb/rgba to Hex
	function rgbToHex(rgb) {
		return componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);
	}

	//display the touch/click position and color info
	function updateStatus(pos, color) {
		var hexColor = rgbToHex(color);
		wsSetAll(hexColor);
		updateStatusUI(pos, color);
	}

	// Removed from 'updateStatus' function because need a UI update  method without a wsSetAll call.
	function updateStatusUI(pos, color) {
		var hexColor = rgbToHex(color);
		hexColor = "#" + hexColor;
		
		$('#status').css("backgroundColor", hexColor);
		$('#status_color').text(hexColor + " - R=" + color[0] + ", G=" + color[1] + ", B=" + color[2]);
		if (pos)
			$('#status_pos').text("x: " + pos.x + " - y: " + pos.y);		
	}

	//handle the touch event
	function doTouch(event) {
		//to not also fire on click
		event.preventDefault();
		var el = event.target;
		
		//touch position
		var pos = {x: Math.round(event.targetTouches[0].pageX - el.offsetLeft),
				   y: Math.round(event.targetTouches[0].pageY - el.offsetTop)};
		//color
		var color = context.getImageData(pos.x, pos.y, 1, 1).data;

		updateStatus(pos, color);
	}

	function doClick(event) {   
		//click position   
		var pos = getMousePos(canvas, event);
		//color
		var color = context.getImageData(pos.x, pos.y, 1, 1).data;
		
		//console.log("click", pos.x, pos.y, color);
		updateStatus(pos, color);
		
		//now do sth with the color rgbToHex(color);
		//don't do stuff when #000000 (outside circle and lines
	}

	// ******************************************************************
	// main
	// ******************************************************************
	init();
	
}); // end of document ready
})(jQuery); // end of jQuery name space</script>
	</body>
</html>
